import numpy as np
import scipy as sp
from getCoeff import getCoeff


def Laplace(noeud_calcul, type_noeud_domaine, conditions):
    
    dim = np.shape(noeud_calcul)
    data = []
    rang = []
    col = []
    BB = []
    indptr = np.arange(dim[0])
    compteur = 0
    for x in range(dim[0]): # x = i
        for y in range(dim[1]): # y = j #pas de probleme si en col ?
            if (x+1 > dim[0]) or (y+1 > dim[1]):
                return -1
            j, a, b = getCoeff(noeud_calcul[x][y-1], noeud_calcul[x][y+1], noeud_calcul[x+1][y], noeud_calcul[x-1][y], noeud_calcul[x][y], type_noeud_domaine[x][y], conditions[x][y])
            compteur += a.shape[0]
            indptr[x] = compteur #j'en ai besoin pour me servir des fonction sparse matrix
            np.append(data, a)
            np.append(col, j)
            np.append(rang, [noeud_calcul[x][y], noeud_calcul[x][y], noeud_calcul[x][y], noeud_calcul[x][y], noeud_calcul[x][y]])
            np.append(BB, b)
            
    A = sp.sparse.csc_matrix((data, col, indptr), shape=(dim[0], dim[1])).toarray()    #scipy.sparse.csr_matrix ???? plus performant
    psi = sp.sparse.linalg.spsolve(A, BB)

#transformer en vecteur ????
    return psi
